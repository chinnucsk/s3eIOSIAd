/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eIOSIAd_autodefs.h"
#include "s3eEdk.h"
#include "s3eIOSIAd.h"
//Declarations of Init and Term functions
extern s3eResult s3eIOSIAdInit();
extern void s3eIOSIAdTerminate();


const char* s3eIOSIAdGetErrorString()
{
#ifdef S3E_STORE_ERROR_STRINGS
    return s3eEdkErrorGetString(S3E_EXT_IOSIAD_HASH);
#else
    return NULL;
#endif
}

s3eIOSIAdError s3eIOSIAdGetError()
{
    return (s3eIOSIAdError) s3eEdkErrorGet(S3E_EXT_IOSIAD_HASH);
}

#ifdef I3D_OS_IPHONE

static s3eResult s3eIOSIAdSetInt_wrap(s3eIOSIAdProperty prop, int32 value)
{
    IwTrace(IOSIAD_VERBOSE, ("calling s3eIOSIAd func on main thread: s3eIOSIAdSetInt"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eIOSIAdSetInt, 2, prop, value);
}

static s3eResult s3eIOSIAdStart_wrap()
{
    IwTrace(IOSIAD_VERBOSE, ("calling s3eIOSIAd func on main thread: s3eIOSIAdStart"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eIOSIAdStart, 0);
}

static s3eResult s3eIOSIAdStop_wrap()
{
    IwTrace(IOSIAD_VERBOSE, ("calling s3eIOSIAd func on main thread: s3eIOSIAdStop"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eIOSIAdStop, 0);
}

static s3eResult s3eIOSIAdCancel_wrap()
{
    IwTrace(IOSIAD_VERBOSE, ("calling s3eIOSIAd func on main thread: s3eIOSIAdCancel"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eIOSIAdCancel, 0);
}

#define s3eIOSIAdSetInt s3eIOSIAdSetInt_wrap
#define s3eIOSIAdStart s3eIOSIAdStart_wrap
#define s3eIOSIAdStop s3eIOSIAdStop_wrap
#define s3eIOSIAdCancel s3eIOSIAdCancel_wrap

#endif /* I3D_OS_IPHONE */

s3eResult s3eIOSIAdRegister(s3eIOSIAdCallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_IOSIAD_HASH, S3E_IOSIAD_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult s3eIOSIAdUnRegister(s3eIOSIAdCallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_IOSIAD_HASH, S3E_IOSIAD_CALLBACK_MAX, cbid, fn);
}

void s3eIOSIAdRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[9];
    funcPtrs[0] = (void*)s3eIOSIAdRegister;
    funcPtrs[1] = (void*)s3eIOSIAdUnRegister;
    funcPtrs[2] = (void*)s3eIOSIAdGetErrorString;
    funcPtrs[3] = (void*)s3eIOSIAdGetError;
    funcPtrs[4] = (void*)s3eIOSIAdGetInt;
    funcPtrs[5] = (void*)s3eIOSIAdSetInt;
    funcPtrs[6] = (void*)s3eIOSIAdStart;
    funcPtrs[7] = (void*)s3eIOSIAdStop;
    funcPtrs[8] = (void*)s3eIOSIAdCancel;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[9] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("s3eIOSIAd", funcPtrs, sizeof(funcPtrs), flags, s3eIOSIAdInit, s3eIOSIAdTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eIOSIAdStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eIOSIAdRegisterExt;
    return 0;
}

int g_s3eIOSIAdVal = s3eIOSIAdStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eIOSIAdRegisterExt();
}
#endif

#endif
