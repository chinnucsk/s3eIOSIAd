/*
 * Copyright (C) 2001-2011 Ideaworks3D Ltd.
 * All Rights Reserved.
 *
 * This document is protected by copyright, and contains information
 * proprietary to Ideaworks Labs.
 * This file consists of source code released by Ideaworks Labs under
 * the terms of the accompanying End User License Agreement (EULA).
 * Please do not use this program/source code before you have read the
 * EULA and have agreed to be bound by its terms.
 */
/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
#ifndef S3E_EXT_IOSIAD_H
#define S3E_EXT_IOSIAD_H

#include "s3eTypes.h"

/**
 * @addtogroup s3egroup
 * @{
 */

/**
 * @defgroup iosiadapigroup S3E iOS iAd API Reference
 *
 * iAd is an iOS-only API that implements the functionality provided
 * by the iOS SDK's iAd Framework. This allows applications to display
 * paid-for banner adds by connecting with the iAd Network service.
 *
 * @supported
 * - ios: Devices running iOS version 4.0 or newer.
 *
 * For more information on the functionality provided by this API,
 * see the "iOS iAd Overview" section of the S3E API Documentation.
 *
 * @{
 */

/**
 * iAd properties.
 *
 * @see s3eIOSIAdGetInt
 * @see s3eIOSIAdSetInt
 * @par Required Header Files
 * s3eIOSIAd.h
 */
typedef enum s3eIOSIAdProperty
{
    /**
     * [int, read] return 1 if iAd is running 0 othewise.
     */
    S3E_IOSIAD_RUNNING,
    /**
     * [int, read] return 1 if a banner is currently loaded 0 othewise.
     */
    S3E_IOSIAD_BANNER_LOADED,
    /**
     * [int, read, write] return 1 if a banner is being shown, 0 otherwise.  Set
     * to 1 to show banner, 0 to hide banner.
     */
    S3E_IOSIAD_BANNER_SHOW,
    /**
     * [int, read] return the current banner width, or 0 if no banner loaded
     */
    S3E_IOSIAD_BANNER_WIDTH,
    /**
     * [int, read] return the current banner height, or 0 if no banner loaded
     */
    S3E_IOSIAD_BANNER_HEIGHT,
} s3eIOSIAdProperty;

/**
 * iAd error codes.
 *
 * @see s3eIOSIAdGetError
 * @par Required Header Files
 * s3eIOSIAd.h
 */
typedef enum s3eIOSIAdError
{
    S3E_IOSIAD_ERROR_NONE          = 0,    ///< No error.
    S3E_IOSIAD_ERR_PARAM           = 1,    ///< Invalid parameter.
    S3E_IOSIAD_ERR_DEVICE          = 6,    ///< Device failed.
    S3E_IOSIAD_ERR_UNSUPPORTED     = 7,    ///< The action requested is not supported.
    S3E_IOSIAD_ERR_STATE           = 14,   ///< iAd could not perform the desired action because it is in the wrong state.
} s3eIOSIAdError;

/**
 * iAd Callbacks.
 *
 * @see s3eIOSIAdRegister
 * @see s3eIOSIAdUnRegister
 * @par Required Header Files
 * s3eIOSIAd.h
 */
typedef enum s3eIOSIAdCallback
{
    S3E_IOSIAD_CALLBACK_BANNER_LOADED,
    S3E_IOSIAD_CALLBACK_FAILED,
    S3E_IOSIAD_CALLBACK_AD_STARTING,
    S3E_IOSIAD_CALLBACK_AD_FINISHED,
    S3E_IOSIAD_CALLBACK_MAX,
} s3eIOSIAdCallback;

S3E_BEGIN_C_DECL

/**
 * Returns S3E_TRUE if the IOSIAd extension is available.
 */
s3eBool s3eIOSIAdAvailable();

/**
 * @name Legacy Availability
 * @{
 */

/**
 * @deprecated Deprecated alias for s3eIOSIAdAvailable.
 */
s3eBool s3eExtIOSIAdAvailable();
/**@}*/

/**
 * Registers a callback to be called for an operating system event.
 *
 * The available callback types are listed in @ref s3eIOSIAdCallback.
 * @param cbid ID of the event for which to register.
 * @param fn callback function.
 * @param userdata Value to pass to the @e userdata parameter of @e NotifyFunc.
 * @return
 * <ul>
 *  <li>@ref S3E_RESULT_SUCCESS if no error occurred.
 *  <li>@ref S3E_RESULT_ERROR if the operation failed.\n
 *         Call s3eIOSIAdGetError() to retrieve an error code.
 *         This will return one of:
 *  <ul>
 *      <li>@ref S3E_DEVICE_ERR_PARAM if @e cbid is not a valid member of @ref s3eIOSIAdCallback or @e NotifyFunc is NULL.
 *      <li>@ref S3E_DEVICE_ERR_TOO_MANY If the maximum number of callbacks for this device has been exceeded.
 *      <li>@ref S3E_DEVICE_ERR_ALREADY_REG If (@e cbid, @e NotifyFunc) has already been registered.
 *  </ul>
 * </ul>
 * @see s3eIOSIAdUnRegister
 * @note For more information on the system data passed as a parameter to the callback
 * registered using this function, see the @ref s3eIOSIAdCallback enum.
 */
s3eResult s3eIOSIAdRegister(s3eIOSIAdCallback cbid, s3eCallback fn, void* userData);

/**
 * Unregister a callback for a given event.
 * @param cbid ID of the callback for which to register.
 * @param fn Callback Function.
 * @return
 * - @ref S3E_RESULT_SUCCESS if no error occurred.
 * - @ref S3E_RESULT_ERROR if the operation failed.\n
 *         Call s3eIOSIAdGetError() to retrieve an error code.
 *         This will return one of:
 *   - @ref S3E_FILE_ERR_PARAM if @e cbid is not a valid member of @ref s3eIOSIAdCallback.
 *   - @ref S3E_FILE_ERR_NOT_FOUND if @e fn is not registered for callback @e cbid.
 * @note For more information on the systemData passed as a parameter to the callback
 * registered using this function, see the s3eIOSIAdCallback enum.
 * @note It is not necessary to define a return value for any registered callback.
 * @see s3eIOSIAdRegister
 */
s3eResult s3eIOSIAdUnRegister(s3eIOSIAdCallback cbid, s3eCallback fn);

/**
 * Retrieves the last error as a string, if any, for this subdevice. This
 * function is only available in debug builds.
 * @see s3eIOSIAdGetError
 *
 * @remark This function, as opposed to s3eIOSIAdGetError(), will always
 * return the last error no matter how many times it is called. This function
 * should not be relied upon to indicate whether an error has just occurred.
 *
 * @par Required Header Files
 * s3eIOSIAd.h
 */
const char* s3eIOSIAdGetErrorString();

/**
 * Retrieves the last error, if any, for this subdevice.
 * @see s3eIOSIAdGetErrorString
 *
 * @remark Calling this function will retrieve the last error and then remove
 * it from memory; therefore, any further calls to this function will not
 * return an error unless a subsequent error has occurred.
 *
 * @par Required Header Files
 * s3eIOSIAd.h
 */
s3eIOSIAdError s3eIOSIAdGetError();

/**
 * Gets the value for an iAd property.
 *
 * @see s3eIOSIAdProperty
 * @see s3eIOSIAdSetInt
 * @par Required Header Files
 * s3eIOSIAd.h
 */
int32 s3eIOSIAdGetInt(s3eIOSIAdProperty prop);

/**
 * Sets the value for an iAd property.
 *
 * @see s3eIOSIAdProperty
 * @see s3eIOSIAdGetInt
 * @par Required Header Files
 * s3eIOSIAd.h
 */
s3eResult s3eIOSIAdSetInt(s3eIOSIAdProperty prop, int32 value);

/**
 * Start displaying in-app advertising.
 *
 * @see s3eIOSIAdStop
 * @see s3eIOSIAdCancel
 * @par Required Header Files
 * s3eIOSIAd.h
 */
s3eResult s3eIOSIAdStart();

/**
 * Stop displaying in-app advertising.
 *
 * @see s3eIOSIAdStart
 * @see s3eIOSIAdCancel
 * @par Required Header Files
 * s3eIOSIAd.h
 */
s3eResult s3eIOSIAdStop();

/**
 * Cancel any current banner action taking place.
 *
 * A banner may cover part of an application's interface when it's view action
 * is triggered (for example, if it expands to cover more of the screen when
 * touched). This function allows the application to programatically cancel
 * such an event and guarantee that the application is fully displayed, at the
 * cost of possible revenue loss.
 *
 * @see s3eIOSIAdRegister
 * @see s3eIOSIAdUnRegister
 * @par Required Header Files
 * s3eIOSIAd.h
 */
s3eResult s3eIOSIAdCancel();

S3E_END_C_DECL

/**@}*/
/**@}*/

#endif /* !S3E_EXT_IOSIAD_H */
